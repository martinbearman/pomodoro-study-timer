generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String           @unique
  password      String?          // Add password field
  emailVerified DateTime?
  image         String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  accounts      Account[]
  goals         Goal[]
  sessions      Session[]
  studySessions StudySession[]
  preferences   UserPreferences?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Goal {
  id               String         @id @default(cuid())
  userId           String
  goalDescription  String
  goalTimeStamp    DateTime       @default(now())
  totalTimeStudied Int            @default(0)
  isActive         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  studySessions    StudySession[]
}

model StudySession {
  id          String   @id @default(cuid())
  userId      String
  goalId      String?
  sessionDate DateTime @default(now())
  duration    Int
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  goal        Goal?    @relation(fields: [goalId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPreferences {
  id            String   @id @default(cuid())
  userId        String   @unique
  description   String?
  studyDuration Int      @default(1500)
  breakDuration Int      @default(420)
  breakMode     String   @default("manual")
  soundEnabled  Boolean  @default(true)
  darkMode      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
